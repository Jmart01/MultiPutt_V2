//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/prefabs/Player/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""9565b8cb-f9dc-48b3-912d-955731aa599b"",
            ""actions"": [
                {
                    ""name"": ""HoldToMoveCam"",
                    ""type"": ""Button"",
                    ""id"": ""b70e7dfd-c053-4245-a152-0341d3b3d57e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamMovement-ShootPower"",
                    ""type"": ""Value"",
                    ""id"": ""f85a6b17-375d-4b5d-967c-2192079250ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamZoom"",
                    ""type"": ""Value"",
                    ""id"": ""fd884fe5-d707-481d-9691-e3481050ce8f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HoldToShoot"",
                    ""type"": ""Button"",
                    ""id"": ""8f085267-0989-4858-8cc4-42418a681a08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e42cd79-46e5-4ab9-8827-ead5b91b2028"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldToMoveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a32c492a-19aa-42f7-84b2-948cd0a4f412"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""CamMovement-ShootPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1c5cf1c-ef94-4fa0-af5f-a73992ab3c1a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f9a9e0e-96f3-494e-849e-de8bf05fdb94"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldToShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_HoldToMoveCam = m_Gameplay.FindAction("HoldToMoveCam", throwIfNotFound: true);
        m_Gameplay_CamMovementShootPower = m_Gameplay.FindAction("CamMovement-ShootPower", throwIfNotFound: true);
        m_Gameplay_CamZoom = m_Gameplay.FindAction("CamZoom", throwIfNotFound: true);
        m_Gameplay_HoldToShoot = m_Gameplay.FindAction("HoldToShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_HoldToMoveCam;
    private readonly InputAction m_Gameplay_CamMovementShootPower;
    private readonly InputAction m_Gameplay_CamZoom;
    private readonly InputAction m_Gameplay_HoldToShoot;
    public struct GameplayActions
    {
        private @InputActions m_Wrapper;
        public GameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HoldToMoveCam => m_Wrapper.m_Gameplay_HoldToMoveCam;
        public InputAction @CamMovementShootPower => m_Wrapper.m_Gameplay_CamMovementShootPower;
        public InputAction @CamZoom => m_Wrapper.m_Gameplay_CamZoom;
        public InputAction @HoldToShoot => m_Wrapper.m_Gameplay_HoldToShoot;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @HoldToMoveCam.started += instance.OnHoldToMoveCam;
            @HoldToMoveCam.performed += instance.OnHoldToMoveCam;
            @HoldToMoveCam.canceled += instance.OnHoldToMoveCam;
            @CamMovementShootPower.started += instance.OnCamMovementShootPower;
            @CamMovementShootPower.performed += instance.OnCamMovementShootPower;
            @CamMovementShootPower.canceled += instance.OnCamMovementShootPower;
            @CamZoom.started += instance.OnCamZoom;
            @CamZoom.performed += instance.OnCamZoom;
            @CamZoom.canceled += instance.OnCamZoom;
            @HoldToShoot.started += instance.OnHoldToShoot;
            @HoldToShoot.performed += instance.OnHoldToShoot;
            @HoldToShoot.canceled += instance.OnHoldToShoot;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @HoldToMoveCam.started -= instance.OnHoldToMoveCam;
            @HoldToMoveCam.performed -= instance.OnHoldToMoveCam;
            @HoldToMoveCam.canceled -= instance.OnHoldToMoveCam;
            @CamMovementShootPower.started -= instance.OnCamMovementShootPower;
            @CamMovementShootPower.performed -= instance.OnCamMovementShootPower;
            @CamMovementShootPower.canceled -= instance.OnCamMovementShootPower;
            @CamZoom.started -= instance.OnCamZoom;
            @CamZoom.performed -= instance.OnCamZoom;
            @CamZoom.canceled -= instance.OnCamZoom;
            @HoldToShoot.started -= instance.OnHoldToShoot;
            @HoldToShoot.performed -= instance.OnHoldToShoot;
            @HoldToShoot.canceled -= instance.OnHoldToShoot;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnHoldToMoveCam(InputAction.CallbackContext context);
        void OnCamMovementShootPower(InputAction.CallbackContext context);
        void OnCamZoom(InputAction.CallbackContext context);
        void OnHoldToShoot(InputAction.CallbackContext context);
    }
}
